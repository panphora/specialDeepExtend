{"version":3,"sources":["node_modules/deep-equal/lib/keys.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/index.js","index.js"],"names":["deepEqual","require","isObject","a","Array","isArray","getDataType","forEachKeyValuePair","obj","cb","Object","keys","forEach","k","testSourceObjects","timelines","id","text","extra","other","list","data","children","extraData","testTargetObjects","notes","testExpectedOutputs","testSourceObject","i","testTargetObject","testExpectedOutput","output","specialDeepExtend","console","log","sourceOriginal","targetOriginal","JSON","parse","stringify","_specialDeepExtend","source","target","parentKey","parent","sourceType","targetType","key","targetValue","targetValueType","_insertMissingKeyValuePairs","targetItem","matchingSourceItem","find","sourceItem","value","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC9FA,IAAMA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AAGA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD;AAAA,SAAO,QAAOA,CAAP,MAAa,QAAb,IAAyBA,CAAC,KAAK,IAA/B,IAAuC,CAACC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAA/C;AAAA,CAAf;;AACA,IAAIE,OAAO,GAAG,SAAVA,OAAU,CAACF,CAAD;AAAA,SAAOC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAP;AAAA,CAAd;;AACA,IAAIG,WAAW,GAAG,SAAdA,WAAc,CAACH,CAAD;AAAA,SACfD,QAAQ,CAACC,CAAD,CAAT,GACI,QADJ,GAEKE,OAAO,CAACF,CAAD,CAAR,GACA,OADA,GAEA,OALY;AAAA,CAAlB;;AAOA,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","file":"index.js","sourceRoot":"..","sourcesContent":["exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","const deepEqual = require('deep-equal');\n\n\nlet isObject = (a) => typeof a === \"object\" && a !== null && !Array.isArray(a);\nlet isArray = (a) => Array.isArray(a);\nlet getDataType = (a) => (\n  (isObject(a))\n    ? \"object\" \n    : (isArray(a))\n    ? \"array\"\n    : \"other\"\n);\nlet forEachKeyValuePair = (obj, cb) => {\n  Object.keys(obj).forEach(function (k) {\n    cb(k, obj[k]);\n  });\n};\n\n\nlet testSourceObjects = [\n  {\n    timelines: [\n      {id: \"1\", text: \"1\"},\n      {id: \"2\", text: \"2\", extra: \"a\"},\n      {id: \"3\", text: \"3\"}\n    ],\n    other: \"y\"\n  },\n  {\n    list: [\n      {\n        id: \"1\", \n        data: \"a\",\n        children: [\n          {\n            id: \"2\", \n            data: \"b\",\n            extraData: \"h\",\n            children: [\n              {\n                id: \"3\",\n                data: \"c\"\n              }\n            ]\n          }\n        ]\n      },\n    ]\n  }\n];\n\nlet testTargetObjects = [\n  {\n    timelines: [\n      {id: \"1\", text: \"1\", notes: [\"a\", \"b\", \"c\"]},\n      {id: \"2\", text: \"different\"},\n      {id: \"4\", text: \"4\"}\n    ],\n    other: \"x\",\n    extra: []\n  },\n  {\n    list: [\n      {\n        id: \"1\", \n        data: \"z\",\n        children: [\n          {\n            id: \"2\", \n            data: \"y\",\n            extraData: \"h\",\n            children: [\n              {\n                id: \"3\",\n                data: \"x\"\n              }\n            ]\n          }\n        ]\n      },\n    ]\n  }\n];\n\nlet testExpectedOutputs = [\n  {\n    timelines: [\n      {id: \"1\", text: \"1\", notes: [\"a\", \"b\", \"c\"]},\n      {id: \"2\", text: \"different\", extra: \"a\"},\n      {id: \"4\", text: \"4\"}\n    ],\n    other: \"x\",\n    extra: []\n  },\n  {\n    list: [\n      {\n        id: \"1\", \n        data: \"z\",\n        children: [\n          {\n            id: \"2\", \n            data: \"y\",\n            extraData: \"h\",\n            children: [\n              {\n                id: \"3\",\n                data: \"x\"\n              }\n            ]\n          }\n        ]\n      },\n    ]\n  }\n];\n\n\ntestSourceObjects.forEach(function (testSourceObject, i) {\n  let testTargetObject = testTargetObjects[i];\n  let testExpectedOutput = testExpectedOutputs[i]\n\n  let output = specialDeepExtend(testSourceObject, testTargetObject);\n\n  console.log(`test ${i}:`, deepEqual(output, testExpectedOutput) ? \"PASSED\" : \"FAILED\");\n});\n\n\n// object with id 1 has the notes key added to it\n// object with id 2 is changed\n// object with id 3 is removed\n// object with id 4 is added (to the end of the array)\n// other prop is changed\n// extra prop is added on\n// not shown: nested data is also deep extended using specialDeepExtend\n\n\n\n// specialDeepReplace uses ids to extend, add, or remove array items\n// # rules:\n//   - objects can contain arrays or strings in their keys\n//   - arrays can only contain objects, not strings or other primitives\nfunction specialDeepExtend (sourceOriginal, targetOriginal) {\n  // copy the data, so it's not modified\n  sourceOriginal = JSON.parse(JSON.stringify(sourceOriginal));\n  targetOriginal = JSON.parse(JSON.stringify(targetOriginal));\n  return _specialDeepExtend(sourceOriginal, targetOriginal);\n}\n\n// this function will modify data, while the parent specialDeepExtend will not\nfunction _specialDeepExtend (source, target, parentKey, parent) {\n  let sourceType = getDataType(source);\n  let targetType = getDataType(target);\n\n  if (targetType === \"object\") {\n\n    forEachKeyValuePair(target, (key, targetValue) => {\n      let targetValueType = getDataType(targetValue);\n\n      if (targetValueType === \"array\" || targetValueType === \"object\") {\n        _specialDeepExtend(source[key], targetValue, key, source);\n      } else {\n        source[key] = targetValue;\n      }\n    });\n\n    _insertMissingKeyValuePairs(source, target);\n\n  } else if (targetType === \"array\") {\n\n    target.forEach((targetItem) => {\n      let matchingSourceItem = source.find(sourceItem => sourceItem.id === targetItem.id);\n      if (matchingSourceItem) {\n        _insertMissingKeyValuePairs(targetItem, matchingSourceItem);\n      }\n    });\n\n    if (parent) {\n      parent[parentKey] = target;\n    } else {\n      source = target;\n    }\n\n  }\n\n  return source;\n}\n\nfunction _insertMissingKeyValuePairs (target, source) {\n  forEachKeyValuePair(source, (key, value) => {\n    if (target[key] === undefined) {\n      target[key] = value;\n    }\n  });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}